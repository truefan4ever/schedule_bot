import logging
import os
from api import get_today_lessons, get_exams, get_tomorrow_lessons
from config import API_TOKEN
from aiogram import Bot, Dispatcher, executor, types
from keyboard import markup

# TOKEN = os.environ['TOKEN']

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã 622401!\n–ò—Å–ø–æ–ª—å–∑—É–π /help, '
                        '—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!', reply_markup=markup)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply('–ö–æ–º–∞–Ω–¥—ã:\n/today - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n/tomorrow - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n/exams - –ø–æ–ª—É—á—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —ç–∫–∑–∞–º–µ–Ω–æ–≤\n/cat - —Ñ–æ—Ç–∫a –∫–æ—Ç–∏–∫–∞)\n/dog - —Ñ–æ—Ç–∫–∞ –ø–µ—Å–∏–∫–∞)')


@dp.message_handler(commands=['cat'])
async def cats(message: types.Message):
    with open('data/cats.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='Cats are here üò∫')


@dp.message_handler(commands=['dog'])
async def cats(message: types.Message):
    with open('data/dogs.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='Dogs are here üê∂')


@dp.message_handler(commands=['today'])
async def schedule(message: types.Message):
    data = get_today_lessons()
    if type(data) == tuple:
        schedule, current_week, current_day_schedule = data[0], data[1], data[2]
        msg = f"–°–µ–≥–æ–¥–Ω—è: {current_day_schedule.upper()}\n \n"
        for index, value in enumerate(schedule):
            if current_week in value['weekNumber']:
                if value['lessonType'] == '–õ–ö':
                    lesson_type_emodji = 'üìó'
                elif value['lessonType'] == '–õ–†':
                    lesson_type_emodji = 'üìï'
                elif value['lessonType'] == '–ü–ó':
                    lesson_type_emodji = 'üìô'
                msg += f"{index+1}. {value['subject']}\n üïë{value['lessonTime']}\n{lesson_type_emodji}{value['lessonType']}\nüö™{value['auditory'][0]}\nüë§{value['employee'][0]['fio']}\n \n"
    else:
        msg = f"–°–µ–≥–æ–¥–Ω—è {data}, –æ—Ç–¥—ã—Ö–∞–π—Ç–µ!"
    await message.reply(msg)


@dp.message_handler(commands=['tomorrow'])
async def schedule(message: types.Message):
    data = get_tomorrow_lessons()
    if type(data) == tuple:
        schedule, current_week, tomorrow_day_schedule = data[0], data[1], data[2]
        msg = f"–ó–∞–≤—Ç—Ä–∞: {tomorrow_day_schedule.upper()}\n \n"
        for index, value in enumerate(schedule):
            if current_week in value['weekNumber']:
                if value['lessonType'] == '–õ–ö':
                    lesson_type_emodji = 'üìó'
                elif value['lessonType'] == '–õ–†':
                    lesson_type_emodji = 'üìï'
                elif value['lessonType'] == '–ü–ó':
                    lesson_type_emodji = 'üìô'
                msg += f"{index+1}. {value['subject']}\n üïë{value['lessonTime']}\n{lesson_type_emodji}{value['lessonType']}\nüö™{value['auditory'][0]}\nüë§{value['employee'][0]['fio']}\n \n"
    else:
        msg = f"–ó–∞–≤—Ç—Ä–∞ {data}, –æ—Ç–¥—ã—Ö–∞–π—Ç–µ!"
    await message.reply(msg)


@dp.message_handler(commands=['exams'])
async def schedule(message: types.Message):
    exams = get_exams()
    msg = f"–≠–∫–∑–∞–º–µ–Ω—ã:\n \n"
    for value in exams:
        if value['schedule'][0]['lessonType'] == '–≠–∫–∑–∞–º–µ–Ω':
            lesson_type_emodji = 'üìï'
        elif value['schedule'][0]['lessonType'] == '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è':
            lesson_type_emodji = 'üìô'

        msg += f"üìÖ{value['weekDay']}\nüïë{value['schedule'][0]['lessonTime']}\nüö™{value['schedule'][0]['auditory'][0]}\n{lesson_type_emodji}{value['schedule'][0]['subject']}({value['schedule'][0]['lessonType']})\nüë§{value['schedule'][0]['employee'][0]['fio']}\n \n"
    await message.reply(msg)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
